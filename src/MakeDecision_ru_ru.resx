<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppExit" xml:space="preserve">
    <value>Выйти из программы?</value>
  </data>
  <data name="HelpMessage" xml:space="preserve">
    <value>    Программа иллюстрирует нелинейный метод анализа иерархий. Метод предполагает сравнение некоторых объектов на основе набора критериев и выбор наиболее «качественного» объекта, т.е. того, у которого итоговый коэффициент будет наивысшим. Пользователю предлагается самостоятельно выбрать объекты и критерии для их сравнения, а также оценить значимость каждого критерия и «стоимость» объекта по каждому критерию. Каждый шаг метода снабжён пояснениями, излагающими суть метода. При необходимости, все шаги можно повторить заново.
    Первая версия программы была выполнена в среде разработки Microsoft Visual Basic 6.0. Данная среда разработки и, соответственно, язык программирования 8 лет назад уже не являлись наилучшими средствами разработки. Однако в данном случае их возможностей было вполне достаточно. К тому же их простота позволила выполнить полную разработку программы в кратчайшие сроки. Данная же реализация лишь переносит решение в нашу общую для всех остальных проектов экосистему.
    При разработке использовался только лекционный материал, понимания которого более чем достаточно для создания данного (и ему подобных) иллюстративного приложения</value>
  </data>
  <data name="IncorrectValueError" xml:space="preserve">
    <value>Значение оценки должно быть целым числом</value>
  </data>
  <data name="MakeDecisionForm_BExit" xml:space="preserve">
    <value>В&amp;ыход</value>
  </data>
  <data name="MakeDecisionForm_BNext" xml:space="preserve">
    <value>&amp;Далее</value>
  </data>
  <data name="MakeDecisionForm_BReset" xml:space="preserve">
    <value>&amp;Заново</value>
  </data>
  <data name="MakeDecisionForm_SkipUnnecessarySteps" xml:space="preserve">
    <value>Пропускать необязательные шаги</value>
  </data>
  <data name="NotEnoughCriteria" xml:space="preserve">
    <value>Недостаточно критериев для сравнения</value>
  </data>
  <data name="NotEnoughData" xml:space="preserve">
    <value>Заполнены не все ячейки или одна из них имеет нулевое значение</value>
  </data>
  <data name="NotEnoughObjects" xml:space="preserve">
    <value>Недостаточно элементов для сравнения</value>
  </data>
  <data name="ResultLabel" xml:space="preserve">
    <value>Из них следует, что самым лучшим по заданным критериям является элемент «{0:S}»</value>
  </data>
  <data name="Tab01_Label01" xml:space="preserve">
    <value>Данная программа иллюстрирует применение нелинейного метода анализа иерархий для принятия решений.

Для начала иллюстрации нажмите «Далее»</value>
  </data>
  <data name="Tab02_Label02" xml:space="preserve">
    <value>Метод анализа иерархий позволяет сравнить объекты, явления или варианты развития событий на основе набора критериев и выбрать наиболее «правильный», т.е. тот, у которого итоговый коэффициент будет наивысшим.

Поэтому для начала необходимо выбрать элементы, которые необходимо сравнить. Для этого просто введите их названия в список ниже</value>
  </data>
  <data name="Tab03_Label03" xml:space="preserve">
    <value>Теперь Вам необходимо таким же образом выбрать критерии для сравнения ранее указанных объектов, а также указать их «цену», т. е. степень значимости, приоритет.

Её можно задать «по шкале от 1 до 10» (до 100, до 1000), баллами, оценками – как угодно. Главное – чтобы БОЛЬШЕЕ число определяло БОЛЕЕ ЗНАЧИМЫЙ критерий</value>
  </data>
  <data name="Tab04_Label04" xml:space="preserve">
    <value>На этом шаге из полученного вектора приоритетов создаётся матрица сравнений. Для этого выполняется дублирование исходного вектора до тех пор, пока матрица не становится квадратной.

После этого каждый столбец делится на тот свой элемент, номер которого равен номеру столбца в матрице. В результате в матрице на главной диагонали все элементы становятся равными 1</value>
  </data>
  <data name="Tab05_Label05" xml:space="preserve">
    <value>Аналогичным образом задаются и обрабатываются вектора оценок элементов по каждому критерию. Единственное замечание: БОЛЬШЕЕ значение приоритета должно соответствовать ЛУЧШЕМУ элементу, т.е. более подходящему, более качественному, более дешёвому и т.д.</value>
  </data>
  <data name="Tab06_Label06" xml:space="preserve">
    <value>Итак, теперь всё готово для получения конечных оценок элементов. Делается это следующим образом:

• Для всех нормализованных матриц (и критериев, и элементов) составляются вектора средних гармонических: каждый элемент вектора равен произведению элементов соответствующей строки матрицы, возведённому в степень, обратную количеству элементов в строке;
• Затем матрицы умножаются на эти вектора;
• Далее получившиеся вектора цен элементов по разным критериям склеиваются в матрицу в том порядке, в котором эти критерии были объявлены;
• Наконец, эта матрица умножается на вектор цен критериев.

Полученный вектор будет результатом метода. Самое большое число в нём укажет на «наилучший» элемент в заданных условиях</value>
  </data>
  <data name="Tab07_Label07" xml:space="preserve">
    <value>Результаты метода анализа иерархий таковы:</value>
  </data>
  <data name="TooManyCriteria" xml:space="preserve">
    <value>Слишком много критериев для сравнения</value>
  </data>
  <data name="TooManyObjects" xml:space="preserve">
    <value>Слишком много элементов для сравнения</value>
  </data>
</root>